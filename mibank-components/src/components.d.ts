/**
 * This is an autogenerated file created by the Stencil build process.
 * It contains typing information for all components that exist in this project
 * and imports for stencil collections that might be configured in your stencil.config.js file
 */

import '@stencil/core';

declare global {
  namespace JSX {
    interface Element {}
    export interface IntrinsicElements {}
  }
  namespace JSXElements {}

  interface HTMLStencilElement extends HTMLElement {
    componentOnReady(): Promise<this>;
    componentOnReady(done: (ele?: this) => void): void;

    forceUpdate(): void;
  }

  interface HTMLAttributes {}
}

import {
  ChartData,
  ChartDataSets,
  ChartOptions,
} from 'chart.js/dist/chart.bundle.js';
import {
  PieSectionData,
} from './components/mi-chart-js/mi-chart-js';
import {
  NavigationItem,
} from './components/mi-navigation/mi-navigation';
import {
  ChartDataSets as ChartDataSets2,
} from 'chart.js';

declare global {

  namespace StencilComponents {
    interface MiChartJs {
      'addData': (label: string, data: any) => void;
      'data': ChartData;
      'getDataAtElement': (evt: any) => PieSectionData;
      'options': ChartOptions;
      'ref': any;
      'type': string;
      'updateChart': (data: any) => void;
    }
  }

  interface HTMLMiChartJsElement extends StencilComponents.MiChartJs, HTMLStencilElement {}

  var HTMLMiChartJsElement: {
    prototype: HTMLMiChartJsElement;
    new (): HTMLMiChartJsElement;
  };
  interface HTMLElementTagNameMap {
    'mi-chart-js': HTMLMiChartJsElement;
  }
  interface ElementTagNameMap {
    'mi-chart-js': HTMLMiChartJsElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'mi-chart-js': JSXElements.MiChartJsAttributes;
    }
  }
  namespace JSXElements {
    export interface MiChartJsAttributes extends HTMLAttributes {
      'data'?: ChartData;
      'options'?: ChartOptions;
      'ref'?: any;
      'type'?: string;
    }
  }
}


declare global {

  namespace StencilComponents {
    interface MiGrid {

    }
  }

  interface HTMLMiGridElement extends StencilComponents.MiGrid, HTMLStencilElement {}

  var HTMLMiGridElement: {
    prototype: HTMLMiGridElement;
    new (): HTMLMiGridElement;
  };
  interface HTMLElementTagNameMap {
    'mi-grid': HTMLMiGridElement;
  }
  interface ElementTagNameMap {
    'mi-grid': HTMLMiGridElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'mi-grid': JSXElements.MiGridAttributes;
    }
  }
  namespace JSXElements {
    export interface MiGridAttributes extends HTMLAttributes {

    }
  }
}


declare global {

  namespace StencilComponents {
    interface MiHeading {
      'text': string;
      'type': string;
    }
  }

  interface HTMLMiHeadingElement extends StencilComponents.MiHeading, HTMLStencilElement {}

  var HTMLMiHeadingElement: {
    prototype: HTMLMiHeadingElement;
    new (): HTMLMiHeadingElement;
  };
  interface HTMLElementTagNameMap {
    'mi-heading': HTMLMiHeadingElement;
  }
  interface ElementTagNameMap {
    'mi-heading': HTMLMiHeadingElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'mi-heading': JSXElements.MiHeadingAttributes;
    }
  }
  namespace JSXElements {
    export interface MiHeadingAttributes extends HTMLAttributes {
      'text'?: string;
      'type'?: string;
    }
  }
}


declare global {

  namespace StencilComponents {
    interface MiNavigation {
      'closeNavigation': () => void;
      'navItems': Array<NavigationItem>;
      'openNavigation': () => void;
      'toggleNavigation': () => void;
    }
  }

  interface HTMLMiNavigationElement extends StencilComponents.MiNavigation, HTMLStencilElement {}

  var HTMLMiNavigationElement: {
    prototype: HTMLMiNavigationElement;
    new (): HTMLMiNavigationElement;
  };
  interface HTMLElementTagNameMap {
    'mi-navigation': HTMLMiNavigationElement;
  }
  interface ElementTagNameMap {
    'mi-navigation': HTMLMiNavigationElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'mi-navigation': JSXElements.MiNavigationAttributes;
    }
  }
  namespace JSXElements {
    export interface MiNavigationAttributes extends HTMLAttributes {
      'navItems'?: Array<NavigationItem>;
    }
  }
}


declare global {

  namespace StencilComponents {
    interface MiPieGraph {
      'data': ChartDataSets[];
    }
  }

  interface HTMLMiPieGraphElement extends StencilComponents.MiPieGraph, HTMLStencilElement {}

  var HTMLMiPieGraphElement: {
    prototype: HTMLMiPieGraphElement;
    new (): HTMLMiPieGraphElement;
  };
  interface HTMLElementTagNameMap {
    'mi-pie-graph': HTMLMiPieGraphElement;
  }
  interface ElementTagNameMap {
    'mi-pie-graph': HTMLMiPieGraphElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'mi-pie-graph': JSXElements.MiPieGraphAttributes;
    }
  }
  namespace JSXElements {
    export interface MiPieGraphAttributes extends HTMLAttributes {
      'data'?: ChartDataSets[];
    }
  }
}


declare global {

  namespace StencilComponents {
    interface MiSection {

    }
  }

  interface HTMLMiSectionElement extends StencilComponents.MiSection, HTMLStencilElement {}

  var HTMLMiSectionElement: {
    prototype: HTMLMiSectionElement;
    new (): HTMLMiSectionElement;
  };
  interface HTMLElementTagNameMap {
    'mi-section': HTMLMiSectionElement;
  }
  interface ElementTagNameMap {
    'mi-section': HTMLMiSectionElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'mi-section': JSXElements.MiSectionAttributes;
    }
  }
  namespace JSXElements {
    export interface MiSectionAttributes extends HTMLAttributes {

    }
  }
}


declare global {

  namespace StencilComponents {
    interface MiTable {
      'data': Array<any>;
      'headings': Array<string>;
      'ref': any;
      'rowOnClick': Function;
    }
  }

  interface HTMLMiTableElement extends StencilComponents.MiTable, HTMLStencilElement {}

  var HTMLMiTableElement: {
    prototype: HTMLMiTableElement;
    new (): HTMLMiTableElement;
  };
  interface HTMLElementTagNameMap {
    'mi-table': HTMLMiTableElement;
  }
  interface ElementTagNameMap {
    'mi-table': HTMLMiTableElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'mi-table': JSXElements.MiTableAttributes;
    }
  }
  namespace JSXElements {
    export interface MiTableAttributes extends HTMLAttributes {
      'data'?: Array<any>;
      'headings'?: Array<string>;
      'ref'?: any;
      'rowOnClick'?: Function;
    }
  }
}

declare global { namespace JSX { interface StencilJSX {} } }

export declare function defineCustomElements(window: any): void;